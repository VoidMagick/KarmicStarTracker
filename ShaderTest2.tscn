[gd_scene load_steps=4 format=2]

[ext_resource path="res://Artwork/Icons/Vector/planet_sun.svg" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Adjust these artistically
uniform vec3 cyan = vec3(0.0,1.0,1.0);
uniform vec3 green = vec3(0.0,1.0,0.0);

// Other constants -- probably do not touch
uniform float PI = 3.1415926;

// Functions

float SMOOTH(float r, float R) {
	return (1.0-smoothstep(R-0.001,R+0.001,r));
}

float circle(vec2 uv, vec2 center, float radius, float thk) {
	float r = distance(uv,center);
	return SMOOTH(r-thk/2.0,radius) - SMOOTH(r+thk/2.0,radius);
}

float line(vec2 uv, vec2 center, float angle, float thk) {
	float y = sin(angle);
	return 1.0;
}

// Fragment function

void fragment(){
	// Variables we will return to COLOR at the end
	vec3 finalcolor = vec3(0.0);
	float finalalpha = 1.0;
	
	// Draw a bunch of circles
	float circles = 0.0;
	for (int i=1; i<6; i++){
		circles += circle(UV,vec2(0.5),0.1*float(i),0.003);
	}
	//finalcolor += circles * cyan;
	//finalalpha *= circles;
	
	// Draw the grid lines
	float line = 0.0;
	vec2 v = vec2(1.0,1.0);
	vec2 vf = ((dot(UV,v))*v - UV);
	line = sqrt(vf[0]*vf[0]+vf[1]*vf[1]);
	finalcolor += line * cyan;
	
	// Finally, let's draw our shader
	COLOR = vec4(finalcolor,finalalpha);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/cyan = Vector3( 0, 1, 1 )
shader_param/green = Vector3( 0, 1, 0 )
shader_param/PI = 3.14159

[node name="Node2D" type="Node2D"]

[node name="Camera2D" type="Camera2D" parent="."]
current = true
zoom = Vector2( 0.2, 0.2 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
scale = Vector2( 1.6, 1.6 )
texture = ExtResource( 1 )
